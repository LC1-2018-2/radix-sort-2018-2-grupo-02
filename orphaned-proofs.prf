("radix_sort" radix_sort merge_permutes 0 (merge-permutes-remastered "trying another way to prove merge-permutes with less grinds" 3751053469 ("" (measure-induct+ "length(l1)+length(l2)" ("l1" "l2")) (("" (skeep) (("" (expand "merge" 1) (("" (lift-if) (("" (prop) (("1" (expand "permutations") (("1" (propax) nil nil)) nil) ("2" (expand "permutations") (("2" (propax) nil nil)) nil) ("3" (inst -2 "cdr(x!1)" "x!2" "d") (("3" (split) (("1" (expand "permutations") (("1" (skolem 1 "x") (("1" (inst -1 "x") (("1" (lemma "occurrences_of_app") (("1" (rewrite "occurrences_of_app") (("1" (copy -1) (("1" (inst -2 "cdr(x!1)" "x!2" "x") (("1" (inst -1 "x!1" "x!2" "x") (("1" (rewrite "occurrences_of_app") (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "occurrences_of_app") (("2" (expand "permutations") (("2" (skolem 2 "x") (("2" (inst -1 "x!1" "x!2" "x") (("2" (rewrite "occurrences_of_app") (("2" (expand "occurrences") (("2" (lift-if) (("2" (expand "length") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (inst -1 "x!1" "cdr(x!2)" "d") (("4" (expand "permutations") (("4" (skolem 2 "x") (("4" (split) (("1" (inst -1 "x") (("1" (lemma "occurrences_of_app") (("1" (rewrite "occurrences_of_app") (("1" (expand "append") (("1" (inst -1 "x!1" "x!2" "x") (("1" (assert) (("1" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak) (merge_permutes-2 "tentariva 2" 3750613034 ("" (measure-induct+ "length(l1)+length(l2)" ("l1" "l2")) (("" (skeep) (("" (expand "merge" 1) (("" (lift-if) (("" (prop) (("1" (expand "permutations") (("1" (propax) nil nil)) nil) ("2" (expand "permutations") (("2" (propax) nil nil)) nil) ("3" (grind) nil nil) ("4" (inst -1 "x!1" "cdr(x!2)") (("4" (inst -1 "d") (("4" (expand "permutations") (("4" (skeep 2) (("4" (split) (("1" (inst -1 "x") (("1" (lemma "occurrences_of_app") (("1" (copy -1) (("1" (inst -2 "x!1" "cdr(x!2)" "x") (("1" (inst -1 "x!1" "x!2" "x") (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((pred type-eq-decl nil defined_types nil) (well_founded? const-decl "bool" orders nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (measure_induction formula-decl nil measure_induction nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil) (wf_nat formula-decl nil naturalnumbers nil) (merge def-decl "list[nat]" radix_sort nil) (append def-decl "list[T]" list_props nil) (permutations const-decl "bool" sorting nil) (= const-decl "[T, T -> boolean]" equalities nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) (occurrences def-decl "nat" sorting nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (occurrences_of_app formula-decl nil sorting nil)) shostak) (merge_permutes-1 nil 3747591401 ("" (measure-induct+ "length(l1)+length(l2)" ("l1" "l2")) (("" (skeep) (("" (expand "merge") (("" (lift-if) (("" (prop) (("1" (hide -2) (("1" (expand "append") (("1" (assert) (("1" (expand "permutations") (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2) (("2" (expand "permutations") (("2" (propax) nil nil)) nil)) nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil) ((occurrences def-decl "nat" sorting nil) (null adt-constructor-decl "(null?)" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (append_null formula-decl nil list_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (occurrences_of_app formula-decl nil sorting nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (permutations const-decl "bool" sorting nil) (append def-decl "list[T]" list_props nil) (merge def-decl "list[nat]" radix_sort nil) (wf_nat formula-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (measure_induction formula-decl nil measure_induction nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (well_founded? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil)) shostak))("radix_sort" radix_sort xmerge_permutes 0 (xmerge_permutes-1 nil 3751206600 ("" (postpone) nil nil) nil shostak))