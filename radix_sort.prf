(radix_sort
 (d_nth_TCC1 0
  (d_nth_TCC1-1 nil 3747583725 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (d_nth_TCC2 0
  (d_nth_TCC2-1 nil 3747583725 ("" (termination-tcc) nil nil) nil nil))
 (n_digits_TCC1 0
  (n_digits_TCC1-1 nil 3747583725
   ("" (skeep)
    (("" (typepred "ndiv(n, 10)") (("" (assert) nil nil)) nil)) nil)
   ((<= const-decl "bool" reals nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (d_digits_gt 0
  (d_digits_gt-1 nil 3748097090
   ("" (measure-induct+ "n" ("n"))
    (("" (expand "n_digits" 1)
      (("" (lift-if)
        (("" (prop)
          (("1" (expand "^" 1)
            (("1" (expand "expt" 1)
              (("1" (expand "expt" 1) (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (inst -1 "ndiv(x!1, 10)")
            (("2" (prop)
              (("1" (expand "^" 2)
                (("1" (assert)
                  (("1" (expand "expt")
                    (("1" (expand "^" -1)
                      (("1" (typepred "ndiv(x!1, 10)")
                        (("1" (typepred "rem(x!1)(10)")
                          (("1"
                            (name-replace "xdiv"
                             "expt(10, n_digits(ndiv(x!1, 10)))")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "ndiv(x!1, 10)") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n_digits def-decl "posnat" radix_sort nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt def-decl "real" exponentiation nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil))
 (rem_div_div 0
  (rem_div_div-1 nil 3748280946
   ("" (lemma "floor_div_prod")
    (("" (skeep)
      (("" (inst -1 "b" "a" "n")
        (("" (rewrite "commutative_mult")
          (("" (typepred "ndiv(n, a)")
            (("" (lemma " rem_floor")
              (("" (inst -1 "a" "n")
                (("" (case "ndiv(n,a) = floor(n/a)")
                  (("1" (replace -1 1)
                    (("1" (typepred "ndiv(n, a * b)")
                      (("1" (lemma " rem_floor")
                        (("1" (inst -1 "a * b" "n")
                          (("1"
                            (case "ndiv(n, a * b) = floor(n / (a * b))")
                            (("1" (replace -1 1)
                              (("1"
                                (typepred "ndiv(floor(n / a), b)")
                                (("1"
                                  (lemma " rem_floor")
                                  (("1"
                                    (inst -1 "b" "floor(n / a)")
                                    (("1"
                                      (case
                                       "ndiv(floor(n / a), b) = floor(floor(n / a) / b)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (hide-all-but (-1 -2 1))
                                          (("2"
                                            (name-replace
                                             "rfna"
                                             "rem(b)(floor(n/a))")
                                            (("2"
                                              (name-replace
                                               "ffnab"
                                               "floor(floor(n / a) / b)")
                                              (("2"
                                                (name-replace
                                                 "nfnab"
                                                 "ndiv(floor(n / a), b)")
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite
                                                       " both_sides_times2")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-1 -2 1))
                              (("2"
                                (name-replace "rabn" "rem(a * b)(n)")
                                (("2"
                                  (name-replace
                                   "fnab"
                                   "floor(n / (a * b))")
                                  (("2"
                                    (name-replace
                                     "nnab"
                                     "ndiv(n, a * b)")
                                    (("2"
                                      (replaces -1 -2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (rewrite
                                           " both_sides_times2")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-1 -2 1))
                    (("2" (name-replace "rabn" "rem(a)(n)")
                      (("2" (name-replace "fna" "floor(n/a)")
                        (("2" (name-replace "nna" "ndiv(n,a)")
                          (("2" (replaces -1 -2)
                            (("2" (assert)
                              (("2"
                                (rewrite " both_sides_times2")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (commutative_mult formula-decl nil number_fields nil)
    (rem_floor formula-decl nil modulo_arithmetic nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times2 formula-decl nil real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (floor_div_prod formula-decl nil mod_lems "ints/"))
   shostak))
 (rem_b_j_rem_div_times_b_TCC1 0
  (rem_b_j_rem_div_times_b_TCC1-1 nil 3748252624
   ("" (skeep)
    (("" (typepred "rem(b)(n)")
      (("" (skeep)
        (("" (typepred "q")
          (("" (case-replace "rem(b)(n) = n - b * q")
            (("1" (assert) (("1" (grind) nil nil)) nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (rem_b_j_rem_div_times_b_TCC2 0
  (rem_b_j_rem_div_times_b_TCC2-1 nil 3748252624
   ("" (subtype-tcc) nil nil) nil nil))
 (rem_b_j_rem_div_times_b_TCC3 0
  (rem_b_j_rem_div_times_b_TCC3-1 nil 3748252624
   ("" (subtype-tcc) nil nil) nil nil))
 (rem_b_j_rem_div_times_b 0
  (rem_b_j_rem_div_times_b-2 nil 3748390711
   ("" (skeep)
    (("" (typepred "rem(b)(n)")
      (("" (typepred "ndiv(n,b)")
        (("" (skeep)
          (("" (case "ndiv(n,b) = q")
            (("1" (case "ndiv(n - rem(b)(n), b) = q")
              (("1" (typepred "rem(b ^ d)((n - rem(b)(n)) / b)")
                (("1" (skeep)
                  (("1" (typepred "rem(b ^ (d + 1))(n - rem(b)(n))")
                    (("1" (skeep)
                      (("1"
                        (case "rem(b ^ (d + 1))(n - rem(b)(n)) = n - rem(b)(n) - (b ^ (1 + d)) * q!2")
                        (("1" (replace -1 1)
                          (("1"
                            (case "rem(b ^ d)((n - rem(b)(n)) / b) = (n - rem(b)(n)) / b - b ^ d * q!1")
                            (("1" (replace -1 1)
                              (("1"
                                (case-replace
                                 "((n - rem(b)(n)) / b - b ^ d * q!1) * b =  n - rem(b)(n) - (b ^ (1 + d)) * q!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (case "q!1 = q!2")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (typepred
                                         "ndiv(n - rem(b)(n), b ^ (d + 1))")
                                        (("2"
                                          (case
                                           "ndiv(n - rem(b)(n), b ^ (d + 1)) = q!2")
                                          (("1"
                                            (typepred
                                             "ndiv( (n - rem(b)(n)) / b, b ^ d)")
                                            (("1"
                                              (case
                                               "ndiv( (n - rem(b)(n)) / b, b ^ d) = q!1")
                                              (("1"
                                                (replace -1 1 rl)
                                                (("1"
                                                  (replace -3 1 rl)
                                                  (("1"
                                                    (case
                                                     "(n - rem(b)(n)) / b = ndiv(n - rem(b)(n), b)")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (lemma
                                                         "rem_div_div")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "n - rem(b)(n)"
                                                           "b"
                                                           "b ^ d")
                                                          (("1"
                                                            (expand
                                                             " ^ "
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "expt")
                                                              (("1"
                                                                (expand
                                                                 " ^ "
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -12 1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (name-replace
                                                 "nrb"
                                                 "(n - rem(b)(n)) / b")
                                                (("2"
                                                  (name-replace
                                                   "rbn"
                                                   "rem(b ^ d)(nrb)")
                                                  (("1"
                                                    (typepred "b ^ d")
                                                    (("1"
                                                      (replace -2 -11)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           " both_sides_times2")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 -6 1))
                                            (("2"
                                              (name-replace
                                               "rr"
                                               "rem(b)(n)")
                                              (("2"
                                                (name-replace
                                                 "nd"
                                                 "ndiv(n - rr, b ^ (d + 1))")
                                                (("2"
                                                  (name-replace
                                                   "rn"
                                                   "rem(b ^ (1 + d))(n - rr)")
                                                  (("2"
                                                    (typepred
                                                     "b ^ (1 + d)")
                                                    (("2"
                                                      (name-replace
                                                       "bdp"
                                                       "b ^ (1 + d)")
                                                      (("2"
                                                        (grind)
                                                        (("2"
                                                          (rewrite
                                                           " both_sides_times2")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2"
                              (name-replace "rrbd"
                               "rem(b ^ d)((n - rem(b)(n)) / b) ")
                              (("2"
                                (replace -5 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (name-replace "rbdp"
                           "rem(b ^ (d + 1))(n - rem(b)(n))")
                          (("2" (replace -2 1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (name-replace "rbn" "rem(b)(n)")
                  (("2" (replace -6 1) (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (typepred "ndiv(n - rem(b)(n), b)")
                (("2" (rewrite "rem_diff2")
                  (("2" (rewrite "rem_zero")
                    (("2" (assert)
                      (("2"
                        (name-replace "nd" "ndiv(n - rem(b)(n), b)")
                        (("2" (name-replace "rr" "rem(b)(n)")
                          (("2" (hide-all-but (-1 -6 1))
                            (("2" (typepred "b")
                              (("2"
                                (replace -3 -2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (rewrite "both_sides_times2")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "b")
                (("2" (name-replace "rr" "rem(b)(n)")
                  (("2" (name-replace "nn" "ndiv(n,b)")
                    (("2" (grind)
                      (("2" (use " both_sides_times2")
                        (("2" (rewrite " both_sides_times2") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (expt def-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (rem_div_div formula-decl nil radix_sort nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times2 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rem_diff2 formula-decl nil modulo_arithmetic nil)
    (rem_zero formula-decl nil modulo_arithmetic nil)
    (<= const-decl "bool" reals nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil)
  (rem_b_j_rem_div_times_b-1 nil 3748342637
   ("" (skeep)
    (("" (typepred "rem(b)(n)")
      (("" (typepred "ndiv(n,b)")
        (("" (skeep)
          (("" (case "ndiv(n,b) = q")
            (("1" (case "ndiv(n - rem(b)(n), b) = q")
              (("1" (typepred "rem(b ^ d)((n - rem(b)(n)) / b)")
                (("1" (skeep)
                  (("1" (typepred "rem(b ^ (d + 1))(n - rem(b)(n))")
                    (("1" (skeep)
                      (("1"
                        (case "rem(b ^ (d + 1))(n - rem(b)(n)) = n - rem(b)(n) - (b ^ (1 + d)) * q!2")
                        (("1" (replace -1 1)
                          (("1"
                            (case "rem(b ^ d)((n - rem(b)(n)) / b) = (n - rem(b)(n)) / b - b ^ d * q!1")
                            (("1" (replace -1 1)
                              (("1"
                                (case-replace
                                 "((n - rem(b)(n)) / b - b ^ d * q!1) * b =  n - rem(b)(n) - (b ^ (1 + d)) * q!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (case "q!1 = q!2")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (typepred
                                         "ndiv(n - rem(b)(n), b ^ (d + 1))")
                                        (("2"
                                          (case
                                           "ndiv(n - rem(b)(n), b ^ (d + 1)) = q!2")
                                          (("1"
                                            (typepred
                                             "ndiv( (n - rem(b)(n)) / b, b ^ d)")
                                            (("1"
                                              (case
                                               "ndiv( (n - rem(b)(n)) / b, b ^ d) = q!1")
                                              (("1"
                                                (replace -1 1 rl)
                                                (("1"
                                                  (replace -3 1 rl)
                                                  (("1"
                                                    (case
                                                     "(n - rem(b)(n)) / b = ndiv(n - rem(b)(n), b)")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (lemma
                                                         "rem_div_div")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "n - rem(b)(n)"
                                                           "b"
                                                           "b ^ d")
                                                          (("1"
                                                            (expand
                                                             " ^ "
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "expt")
                                                              (("1"
                                                                (expand
                                                                 " ^ "
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -12 1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (name-replace
                                                 "nrb"
                                                 "(n - rem(b)(n)) / b")
                                                (("2"
                                                  (name-replace
                                                   "rbn"
                                                   "rem(b ^ d)(nrb)")
                                                  (("1"
                                                    (typepred "b ^ d")
                                                    (("1"
                                                      (replace -2 -11)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           " both_sides_times2")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 -6 1))
                                            (("2"
                                              (name-replace
                                               "rr"
                                               "rem(b)(n)")
                                              (("2"
                                                (name-replace
                                                 "nd"
                                                 "ndiv(n - rr, b ^ (d + 1))")
                                                (("2"
                                                  (name-replace
                                                   "rn"
                                                   "rem(b ^ (1 + d))(n - rr)")
                                                  (("2"
                                                    (typepred
                                                     "b ^ (1 + d)")
                                                    (("2"
                                                      (name-replace
                                                       "bdp"
                                                       "b ^ (1 + d)")
                                                      (("2"
                                                        (grind)
                                                        (("2"
                                                          (rewrite
                                                           " both_sides_times2")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2"
                              (name-replace "rrbd"
                               "rem(b ^ d)((n - rem(b)(n)) / b) ")
                              (("2"
                                (replace -5 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (name-replace "rbdp"
                           "rem(b ^ (d + 1))(n - rem(b)(n))")
                          (("2" (replace -2 1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (name-replace "rbn" "rem(b)(n)")
                  (("2" (replace -6 1) (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (typepred "ndiv(n - rem(b)(n), b)")
                (("2" (rewrite "rem_diff2")
                  (("2" (rewrite "rem_zero")
                    (("2" (assert)
                      (("2"
                        (name-replace "nd" "ndiv(n - rem(b)(n), b)")
                        (("2" (name-replace "rr" "rem(b)(n)")
                          (("2" (hide-all-but (-1 -6 1))
                            (("2" (typepred "b")
                              (("2"
                                (replace -3 -2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (rewrite "both_sides_times2")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "b")
                (("2" (name-replace "rr" "rem(b)(n)")
                  (("2" (name-replace "nn" "ndiv(n,b)")
                    (("2" (grind)
                      (("2" (use " both_sides_times2")
                        (("2" (rewrite " both_sides_times2") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (expt def-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (rem_div_div formula-decl nil radix_sort nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times2 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rem_diff2 formula-decl nil modulo_arithmetic nil)
    (rem_zero formula-decl nil modulo_arithmetic nil)
    (<= const-decl "bool" reals nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (rem_b_j_rem_b 0
  (rem_b_j_rem_b-3 nil 3748390808
   ("" (skeep*)
    (("" (typepred "rem(b ^ d)(n)")
      (("" (typepred "rem(b ^ d)(n - rem(b)(n))")
        (("" (typepred "rem(b)(n)")
          (("" (skeep)
            (("" (skeep)
              (("" (skeep)
                (("" (case "rem(b ^ d)(n) = n - b ^ d * q!2")
                  (("1"
                    (case "rem(b ^ d)(n - rem(b)(n)) = n - rem(b)(n) -  b ^ d * q!1")
                    (("1" (replace -1 1)
                      (("1" (replace -2 1)
                        (("1" (assert)
                          (("1"
                            (case "ndiv(n-rem(b)(n),b^d)=ndiv(n,b^d)")
                            (("1"
                              (typepred "ndiv(n - rem(b)(n), b ^ d)")
                              (("1"
                                (typepred "ndiv(n, b ^ d)")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2"
                              (typepred "ndiv(n - rem(b)(n), b ^ d)")
                              (("2"
                                (typepred "ndiv(n, b ^ d)")
                                (("2"
                                  (hide-all-but (-3 -1 -6 1))
                                  (("2"
                                    (typepred "ndiv(n,b)")
                                    (("2"
                                      (case
                                       "n - rem(b)(n)=   b * ndiv(n, b)")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case-replace
                                           "ndiv(b * ndiv(n, b), b ^ d) = ndiv( ndiv(n, b), b ^ (d - 1))")
                                          (("1"
                                            (typepred
                                             " ndiv(ndiv(n, b), b ^ (d - 1))")
                                            (("1"
                                              (lemma "rem_div_div")
                                              (("1"
                                                (inst
                                                 -1
                                                 "n"
                                                 "b"
                                                 "b ^ (d - 1)")
                                                (("1"
                                                  (replace -1 1 rl)
                                                  (("1"
                                                    (expand " ^ " 1)
                                                    (("1"
                                                      (expand
                                                       "expt"
                                                       1
                                                       2)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred
                                                   " b ^ (d - 1)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred " b ^ (d - 1)")
                                              (("2"
                                                (assert)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (typepred
                                               "ndiv(ndiv(n, b), b ^ (d - 1))")
                                              (("1"
                                                (case
                                                 "ndiv(b * ndiv(n, b), b ^ d) =  (b * ndiv(n, b) - rem(b ^ d)(b * ndiv(n, b))) / b ^ d")
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (case
                                                     " ndiv(ndiv(n, b), b ^ (d - 1)) =  (ndiv(n, b) - rem(b ^ (d - 1))(ndiv(n, b)) ) / b ^ (d -1)")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           " ^ "
                                                           1
                                                           2)
                                                          (("1"
                                                            (expand
                                                             " ^ "
                                                             1
                                                             3)
                                                            (("1"
                                                              (expand
                                                               "expt"
                                                               1
                                                               1)
                                                              (("1"
                                                                (lemma
                                                                 "div_div2")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "b"
                                                                   "expt(b, d - 1)"
                                                                   "(b * ndiv(n, b) - rem(b ^ d)(b * ndiv(n, b)))")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1
                                                                     rl)
                                                                    (("1"
                                                                      (rewrite
                                                                       "both_sides_div1")
                                                                      (("1"
                                                                        (rewrite
                                                                         "div_cancel3")
                                                                        (("1"
                                                                          (lemma
                                                                           "div_cancel3")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "b"
                                                                             "(b * ndiv(n, b) - rem(b ^ d)(b * ndiv(n, b)))"
                                                                             "(ndiv(n, b) - rem(b ^ (d - 1))(ndiv(n, b)))")
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (hide
                                                                                 2
                                                                                 3)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "commutative_mult")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "ndiv(n, b)"
                                                                                       "b")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case
                                                                                               "rem(b ^ d)(b * ndiv(n, b)) =
        (rem(b ^ (d - 1))(ndiv(n, b)) * b)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "rem_b_j_rem_div_times_b")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "n"
                                                                                                     "d - 1"
                                                                                                     "b")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "(n - rem(b)(n)) / b = ndiv(n, b)")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "n - rem(b)(n) = b * ndiv(n, b)")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               -3)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "b ^ (d - 1)")
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (typepred " b ^ (d - 1)")
                                            (("3"
                                              (assert)
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (rem_div_div formula-decl nil radix_sort nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (expt def-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (commutative_mult formula-decl nil number_fields nil)
    (rem_b_j_rem_div_times_b formula-decl nil radix_sort nil)
    (div_cancel3 formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (div_div2 formula-decl nil real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (<= const-decl "bool" reals nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil)
  (rem_b_j_rem_b-2 nil 3748390751
   ("" (skeep*)
    (("" (typepred "rem(b ^ d)(n)")
      (("" (typepred "rem(b ^ d)(n - rem(b)(n))")
        (("" (typepred "rem(b)(n)")
          (("" (skeep)
            (("" (skeep)
              (("" (skeep)
                (("" (case "rem(b ^ d)(n) = n - b ^ d * q!2")
                  (("1"
                    (case "rem(b ^ d)(n - rem(b)(n)) = n - rem(b)(n) -  b ^ d * q!1")
                    (("1" (replace -1 1)
                      (("1" (replace -2 1)
                        (("1" (assert)
                          (("1"
                            (case "ndiv(n-rem(b)(n),b^d)=ndiv(n,b^d)")
                            (("1"
                              (typepred "ndiv(n - rem(b)(n), b ^ d)")
                              (("1"
                                (typepred "ndiv(n, b ^ d)")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2"
                              (typepred "ndiv(n - rem(b)(n), b ^ d)")
                              (("2"
                                (typepred "ndiv(n, b ^ d)")
                                (("2"
                                  (hide-all-but (-3 -1 -6 1))
                                  (("2"
                                    (typepred "ndiv(n,b)")
                                    (("2"
                                      (case
                                       "n - rem(b)(n)=   b * ndiv(n, b)")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case-replace
                                           "ndiv(b * ndiv(n, b), b ^ d) = ndiv( ndiv(n, b), b ^ (d - 1))")
                                          (("1"
                                            (typepred
                                             " ndiv(ndiv(n, b), b ^ (d - 1))")
                                            (("1"
                                              (lemma "rem_div_div")
                                              (("1"
                                                (inst
                                                 -1
                                                 "n"
                                                 "b"
                                                 "b ^ (d - 1)")
                                                (("1"
                                                  (replace -1 1 rl)
                                                  (("1"
                                                    (expand " ^ " 1)
                                                    (("1"
                                                      (expand
                                                       "expt"
                                                       1
                                                       2)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred
                                                   " b ^ (d - 1)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred " b ^ (d - 1)")
                                              (("2"
                                                (assert)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (typepred
                                               "ndiv(ndiv(n, b), b ^ (d - 1))")
                                              (("1" (postpone) nil nil)
                                               ("2"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (typepred " b ^ (d - 1)")
                                            (("3"
                                              (assert)
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (rem_b_j_rem_b-1 nil 3748269049
   ("" (skeep*)
    (("" (typepred "rem(b ^ d)(n)")
      (("" (typepred "rem(b ^ d)(n - rem(b)(n))")
        (("" (typepred "rem(b)(n)")
          (("" (skeep)
            (("" (skeep)
              (("" (skeep)
                (("" (case "rem(b ^ d)(n) = n - b ^ d * q!2")
                  (("1"
                    (case "rem(b ^ d)(n - rem(b)(n)) = n - rem(b)(n) -  b ^ d * q!1")
                    (("1" (replace -1 1)
                      (("1" (replace -2 1)
                        (("1" (assert)
                          (("1"
                            (case "ndiv(n-rem(b)(n),b^d)=ndiv(n,b^d)")
                            (("1"
                              (typepred "ndiv(n - rem(b)(n), b ^ d)")
                              (("1"
                                (typepred "ndiv(n, b ^ d)")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2"
                              (typepred "ndiv(n - rem(b)(n), b ^ d)")
                              (("2"
                                (typepred "ndiv(n, b ^ d)")
                                (("2"
                                  (hide-all-but (-3 -1 -6 1))
                                  (("2"
                                    (typepred "ndiv(n,b)")
                                    (("2"
                                      (case
                                       "n - rem(b)(n)=   b * ndiv(n, b)")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case-replace
                                           "ndiv(b * ndiv(n, b), b ^ d) = ndiv( ndiv(n, b), b ^ (d - 1))")
                                          (("1"
                                            (typepred
                                             " ndiv(ndiv(n, b), b ^ (d - 1))")
                                            (("1"
                                              (lemma "rem_div_div")
                                              (("1"
                                                (inst
                                                 -1
                                                 "n"
                                                 "b"
                                                 "b ^ (d - 1)")
                                                (("1"
                                                  (replace -1 1 rl)
                                                  (("1"
                                                    (expand " ^ " 1)
                                                    (("1"
                                                      (expand
                                                       "expt"
                                                       1
                                                       2)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred
                                                   " b ^ (d - 1)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred " b ^ (d - 1)")
                                              (("2"
                                                (assert)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (typepred
                                               "ndiv(ndiv(n, b), b ^ (d - 1))")
                                              (("1" (postpone) nil nil)
                                               ("2"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (typepred " b ^ (d - 1)")
                                            (("3"
                                              (assert)
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (d_exp_dec 0
  (d_exp_dec-1 nil 3748104043
   ("" (induct "d")
    (("1" (grind)
      (("1" (typepred "rem(1)(n!1)") (("1" (assert) nil nil)) nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "ndiv(n,10)")
          (("2" (expand "d_nth" 1)
            (("2" (case-replace "ndiv(n, 10) = (n - rem(10)(n))/10")
              (("1" (lemma "rem_b_j_rem_div_times_b")
                (("1" (copy -1)
                  (("1" (inst -1 "n" "j" "10")
                    (("1" (inst -2 "n" "j + 1" "10")
                      (("1" (lemma " rem_b_j_rem_b")
                        (("1" (copy -1)
                          (("1" (inst -2 "n" "j + 1" "10")
                            (("1" (inst -1 "n" "j + 2" "10")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replaces -1 :dir rl)
                                      (("1"
                                        (replaces -1 :dir rl)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "ndiv(n,10)")
                (("2" (typepred "rem(10)(n)") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nil application-judgement "upto(n)" modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rem_b_j_rem_b formula-decl nil radix_sort nil)
    (rem_b_j_rem_div_times_b formula-decl nil radix_sort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (expt def-decl "real" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (d_nth def-decl "below[10]" radix_sort nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   shostak))
 (max_digits_TCC1 0
  (max_digits_TCC1-1 nil 3747583725 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (max_digits_TCC2 0
  (max_digits_TCC2-1 nil 3747583725 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (max_digits_TCC3 0
  (max_digits_TCC3-1 nil 3747583725
   ("" (grind)
    (("" (expand "length" -2)
      (("" (expand "length" 1) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (max_digits_TCC4 0
  (max_digits_TCC4-1 nil 3747583725
   ("" (skeep)
    (("" (typepred "l")
      (("" (hide -1)
        (("" (grind)
          (("" (expand "length" 2 2) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (merge_TCC1 0
  (merge_TCC1-1 nil 3747583725 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (merge_TCC2 0
  (merge_TCC2-1 nil 3747583725 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (merge_TCC3 0
  (merge_TCC3-1 nil 3747583725 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (merge_TCC4 0
  (merge_TCC4-1 nil 3747583725 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (merge_sort_TCC1 0
  (merge_sort_TCC1-1 nil 3747583725 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil))
   nil))
 (merge_sort_TCC2 0
  (merge_sort_TCC2-1 nil 3747583725
   ("" (skeep)
    (("" (rewrite "length_prefix")
      (("" (use "merge_sort_TCC1")
        (("" (assert) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (length_prefix formula-decl nil sorting nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (merge_sort_TCC1 subtype-tcc nil radix_sort nil))
   nil))
 (merge_sort_TCC3 0
  (merge_sort_TCC3-1 nil 3747583725
   ("" (skeep)
    (("" (rewrite "length_suffix") (("" (grind) nil nil)) nil)) nil)
   ((nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (length_suffix formula-decl nil sorting nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (radixsort_TCC1 0
  (radixsort_TCC1-1 nil 3747583725 ("" (subtype-tcc) nil nil) nil nil))
 (radixsort_TCC2 0
  (radixsort_TCC2-1 nil 3747583725 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (radixsort_TCC3 0
  (radixsort_TCC3-1 nil 3747583725 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (radixsort_TCC4 0
  (radixsort_TCC4-1 nil 3747583725 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (radixsort_TCC5 0
  (radixsort_TCC5-1 nil 3747583725 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (merge_length 0
  (merge_length-1 nil 3747589763
   ("" (measure-induct+ "length(l1) + length(l2)" ("l1" "l2"))
    (("1" (skeep)
      (("1" (expand "merge" 1)
        (("1" (lift-if)
          (("1" (prop)
            (("1" (grind) nil nil)
             ("2" (lemma "append_null")
              (("2" (inst -1 "x!1") (("2" (grind) nil nil)) nil)) nil)
             ("3" (expand "length" 1 1)
              (("3" (inst -2 "cdr(x!1)" "x!2") (("3" (grind) nil nil))
                nil))
              nil)
             ("4" (expand "length" 2 1)
              (("4" (inst -1 "x!1" "cdr(x!2)")
                (("4" (inst -1 "d") (("4" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (expand "well_founded?")
      (("2" (skeep)
        (("2" (inst -1 "p")
          (("2" (assert) (("2" (prop) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (append_null formula-decl nil list_props nil)
    (append def-decl "list[T]" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (merge def-decl "list[nat]" radix_sort nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (merge_sort_length 0
  (merge_sort_length-1 nil 3747590599
   ("" (measure-induct+ "length(l)" ("l"))
    (("1" (skeep)
      (("1" (expand "merge_sort" 1)
        (("1" (lift-if)
          (("1" (prop)
            (("1" (inst-cp -1 "prefix(x!1, floor(length(x!1) / 2))")
              (("1" (inst -1 "suffix(x!1, floor(length(x!1) / 2))")
                (("1" (inst -1 "d")
                  (("1" (inst -2 "d")
                    (("1" (split)
                      (("1" (split)
                        (("1" (rewrite "merge_length")
                          (("1" (rewrite "length_suffix")
                            (("1" (rewrite "length_prefix")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (rewrite "length_prefix")
                          (("2" (grind) nil nil)) nil))
                        nil)
                       ("2" (rewrite "length_suffix")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (expand "well_founded?")
      (("2" (skeep) (("2" (inst -1 "p") (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (prefix def-decl "list[nat]" sorting nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (merge_length formula-decl nil radix_sort nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_prefix formula-decl nil sorting nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_suffix formula-decl nil sorting nil)
    (suffix def-decl "list[nat]" sorting nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (merge_sort def-decl "list[nat]" radix_sort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (merge_permutes 0
  (merge_permutes-1 nil 3747591401
   ("" (measure-induct+ "length(l1)+length(l2)" ("l1" "l2"))
    (("" (postpone) nil nil)) nil)
   ((occurrences def-decl "nat" sorting nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append_null formula-decl nil list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (occurrences_of_app formula-decl nil sorting nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (permutations const-decl "bool" sorting nil)
    (append def-decl "list[T]" list_props nil)
    (merge def-decl "list[nat]" radix_sort nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (merge_sort_permutes 0
  (merge_sort_permutes-1 nil 3747664130
   ("" (measure-induct+ "length(l)" "l")
    (("1" (expand "permutations")
      (("1" (skeep*)
        (("1" (expand "merge_sort" 1)
          (("1" (lift-if)
            (("1" (assert)
              (("1" (prop)
                (("1"
                  (case "x!1= append(prefix(x!1, floor(length(x!1) / 2)), suffix(x!1, floor(length(x!1) / 2)))")
                  (("1"
                    (case "occurrences(x!1)(x) = occurrences(append(prefix(x!1, floor(length(x!1) / 2)),
              suffix(x!1, floor(length(x!1) / 2))))(x)")
                    (("1" (replaces -1)
                      (("1" (rewrite "occurrences_of_app")
                        (("1" (lemma "merge_permutes")
                          (("1"
                            (inst -1
                             "merge_sort(prefix(x!1, floor(length(x!1) / 2)),
                                    d)"
                             "merge_sort(suffix(x!1, floor(length(x!1) / 2)),
                                    d)" "d")
                            (("1" (expand "permutations")
                              (("1"
                                (inst?)
                                (("1"
                                  (rewrite "occurrences_of_app")
                                  (("1"
                                    (replaces -1 :dir rl)
                                    (("1"
                                      (inst-cp
                                       -2
                                       "prefix(x!1, floor(length(x!1) / 2))")
                                      (("1"
                                        (inst
                                         -2
                                         "suffix(x!1, floor(length(x!1) / 2))")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (inst? -3)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "length_prefix")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite "length_suffix")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (rewrite "app_prefix_suffix") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (expand "well_founded?")
      (("2" (skeep) (("2" (inst -1 "p") (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (suffix def-decl "list[nat]" sorting nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (prefix def-decl "list[nat]" sorting nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (append def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (merge_permutes formula-decl nil radix_sort nil)
    (length_suffix formula-decl nil sorting nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_prefix formula-decl nil sorting nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (occurrences_of_app formula-decl nil sorting nil)
    (occurrences def-decl "nat" sorting nil)
    (app_prefix_suffix formula-decl nil sorting nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (permutations const-decl "bool" sorting nil)
    (merge_sort def-decl "list[nat]" radix_sort nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (merge_preserves_sort 0
  (merge_preserves_sort-1 nil 3747853120
   ("" (measure-induct+ "length(l1)+length(l2)" ("l1" "l2"))
    (("" (skeep)
      (("" (expand "merge" 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (grind) nil nil)
             ("2" (case "x!2=null")
              (("1" (replace -1)
                (("1" (rewrite "append_null") (("1" (assert) nil nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil)
             ("3" (inst -2 "cdr(x!1)" "x!2")
              (("3" (inst?)
                (("3" (prop)
                  (("1" (expand "is_sorted_ud?" 1)
                    (("1" (skeep)
                      (("1" (expand "nth" 1)
                        (("1" (lift-if)
                          (("1" (lift-if)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (lemma "merge_permutes")
                                  (("2"
                                    (inst -1 "cdr(x!1)" "x!2" "d")
                                    (("2"
                                      (lemma
                                       "permutations_preserve_contents")
                                      (("2"
                                        (inst
                                         -1
                                         "merge(cdr(x!1), x!2, d)"
                                         "append(cdr(x!1), x!2)"
                                         "j-1")
                                        (("1"
                                          (rewrite
                                           "permutations_is_commutative")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (case
                                                 "j_1 < length(cdr(x!1))")
                                                (("1"
                                                  (rewrite
                                                   "nth_append")
                                                  (("1"
                                                    (expand
                                                     "is_sorted_ud?"
                                                     -7)
                                                    (("1"
                                                      (inst
                                                       -7
                                                       "0"
                                                       "j_1+1")
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -7)
                                                        (("1"
                                                          (hide-all-but
                                                           (-2 -7 2))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-1 1))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide-all-but
                                                         (-1 1))
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-1 -2))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use "nth_of_append")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (inst
                                                           -8
                                                           "0"
                                                           "0")
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             -8)
                                                            (("1"
                                                              (expand
                                                               "is_sorted_ud?"
                                                               -7)
                                                              (("1"
                                                                (inst
                                                                 -7
                                                                 "0"
                                                                 "j_1-length(cdr(x!1))")
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -7
                                                                   1)
                                                                  (("1"
                                                                    (case
                                                                     "rem(10^(1+d))(car(x!1)) <= rem(10^(1+d))(car(x!2))")
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-1
                                                                        -8
                                                                        3))
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-5
                                                                        -8
                                                                        1))
                                                                      (("2"
                                                                        (case
                                                                         "d_nth(car(x!1), d) * 10^d + rem(10 ^ d)(car(x!1)) = rem(10 ^ (1 + d))(car(x!1))  AND d_nth(car(x!2), d) * 10^d + rem(10 ^ d)(car(x!2)) = rem(10 ^ (1 + d))(car(x!2)) ")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (case
                                                                             "d_nth(car(x!1), d) * 10 ^ d <= d_nth(car(x!2), d) * 10 ^ d")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-3
                                                                                1))
                                                                              (("2"
                                                                                (typepred
                                                                                 "10 ^ d")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "both_sides_times_pos_le1")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (prop)
                                                                          (("1"
                                                                            (rewrite
                                                                             "d_exp_dec")
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "d_exp_dec")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    6))
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1 6))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide-all-but
                                                             (1 6))
                                                            (("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "j_1")
                                                    (("2"
                                                      (rewrite
                                                       "length_append")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (1 2))
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (typepred "j")
                                  (("3" (assert) nil nil))
                                  nil)
                                 ("4"
                                  (expand "is_sorted_ud?" -1)
                                  (("4"
                                    (inst -1 "i-1" "j-1")
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-2 1 3 4))
                    (("2" (expand "is_sorted_ud?")
                      (("2" (skeep)
                        (("2" (inst -1 "i+1" "j+1")
                          (("1" (expand "nth" -1)
                            (("1" (propax) nil nil)) nil)
                           ("2" (typepred "j")
                            (("2" (hide-all-but (-1 1 3))
                              (("2" (grind) nil nil)) nil))
                            nil)
                           ("3" (typepred "i")
                            (("3" (hide-all-but (-1 1 3))
                              (("3" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep)
                    (("3" (inst -4 "i+1" "j")
                      (("1" (hide-all-but (-4 1 3))
                        (("1" (expand "nth" -1 1)
                          (("1" (propax) nil nil)) nil))
                        nil)
                       ("2" (typepred "i")
                        (("2" (hide-all-but (-1 1 4))
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide-all-but (1 3)) (("4" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (inst -1 "x!1" "cdr(x!2)")
              (("4" (inst -1 "d")
                (("4" (prop)
                  (("1" (expand "is_sorted_ud?" 2)
                    (("1" (skeep)
                      (("1" (expand "nth" 2)
                        (("1" (lift-if)
                          (("1" (lift-if)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (lemma "merge_permutes")
                                  (("2"
                                    (inst -1 "x!1" "cdr(x!2)" "d")
                                    (("2"
                                      (lemma
                                       "permutations_preserve_contents")
                                      (("2"
                                        (inst
                                         -1
                                         "merge(x!1, cdr(x!2), d)"
                                         "append(x!1, cdr(x!2))"
                                         "j-1")
                                        (("1"
                                          (rewrite
                                           "permutations_is_commutative")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (use "nth_of_append")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (replaces -2)
                                                      (("1"
                                                        (replaces
                                                         -2
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (expand
                                                           "is_sorted_ud?"
                                                           -5)
                                                          (("1"
                                                            (inst
                                                             -5
                                                             "0"
                                                             "j_1")
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               -5
                                                               1)
                                                              (("1"
                                                                (case
                                                                 "rem(10 ^ (1 + d))(car(x!2)) < rem(10 ^ (1 + d))(car(x!1))")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -6
                                                                    2))
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    4))
                                                                  (("2"
                                                                    (case
                                                                     "d_nth(car(x!1), d) > d_nth(car(x!2), d)")
                                                                    (("1"
                                                                      (rewrite
                                                                       "d_exp_dec"
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (rewrite
                                                                         "d_exp_dec"
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (typepred
                                                                           "rem(10 ^ d)(car(x!2))"
                                                                           "rem(10 ^ d)(car(x!1))")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (case
                                                                               "d_nth(car(x!2), d) * 10 ^ d < d_nth(car(x!1), d) * 10 ^ d")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "(rem(10 ^ d)(car(x!2)) + d_nth(car(x!2), d) * 10 ^ d) / 10^d <
       (rem(10 ^ d)(car(x!1)) + d_nth(car(x!1), d) * 10 ^ d) / 10^d")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "10^d")
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          -2
                                                                                          1))
                                                                                        (("1"
                                                                                          (name-replace
                                                                                           "dad"
                                                                                           "10 ^ d")
                                                                                          (("1"
                                                                                            (name-replace
                                                                                             "m"
                                                                                             "(rem(dad)(car(x!2)) + d_nth(car(x!2), d) * dad)")
                                                                                            (("1"
                                                                                              (name-replace
                                                                                               "M"
                                                                                               "rem(dad)(car(x!1)) + d_nth(car(x!1), d) * dad")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "dad * (m / dad) < dad * (M / dad)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (rewrite
                                                                                                     "both_sides_times_pos_lt2")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (-6
                                                                                      -2
                                                                                      -4
                                                                                      1))
                                                                                    (("2"
                                                                                      (case
                                                                                       "(rem(10 ^ d)(car(x!2)) + d_nth(car(x!2), d) * 10 ^ d) / 10 ^ d = (rem(10 ^ d)(car(x!2))/ 10 ^ d + d_nth(car(x!2), d)) ")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (case
                                                                                           " (rem(10 ^ d)(car(x!1)) + d_nth(car(x!1), d) * 10 ^ d) / 10 ^ d =
(rem(10 ^ d)(car(x!1)) / 10 ^ d + d_nth(car(x!1), d) )")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "rem(10 ^ d)(car(x!2)) / 10 ^ d < 1")
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "rem(10 ^ d)(car(x!1)) / 10 ^ d < 1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (-3
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "both_sides_times_pos_lt2")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "10 ^ d"
                                                                                                         " rem(10 ^ d)(car(x!1)) / 10^d"
                                                                                                         " 1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (1
                                                                                                    -1))
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "both_sides_times_pos_lt2")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "10 ^ d"
                                                                                                       " rem(10 ^ d)(car(x!2)) / 10^d"
                                                                                                       " 1")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (-5
                                                                                  1))
                                                                                (("2"
                                                                                  (lemma
                                                                                   "both_sides_times_pos_lt2")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "10 ^ d"
                                                                                     "d_nth(car(x!2), d)"
                                                                                     "d_nth(car(x!1), d)")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1 5))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (replaces
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (expand
                                                           "is_sorted_ud?"
                                                           -5)
                                                          (("2"
                                                            (inst
                                                             -5
                                                             "0"
                                                             "j_1-length(x!1)+1")
                                                            (("1"
                                                              (hide-all-but
                                                               (1
                                                                -5
                                                                3
                                                                6))
                                                              (("1"
                                                                (typepred
                                                                 "j_1")
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -2)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1
                                                                2
                                                                6
                                                                7))
                                                              (("2"
                                                                (typepred
                                                                 "j_1")
                                                                (("2"
                                                                  (rewrite
                                                                   "length_append")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide-all-but
                                                               (1 7))
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "j_1")
                                                  (("2"
                                                    (hide-all-but
                                                     (-1 1 6))
                                                    (("2"
                                                      (rewrite
                                                       "length_append")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (1 2))
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (typepred "j")
                                  (("3"
                                    (hide-all-but (-2 -3 2))
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (hide-all-but (-1 1 2 3 6))
                                  (("4"
                                    (expand "is_sorted_ud?")
                                    (("4"
                                      (inst -1 "i-1" "j-1")
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-2 1 5))
                    (("2" (expand "is_sorted_ud?")
                      (("2" (skeep)
                        (("2" (inst -1 "i+1" "j+1")
                          (("1" (expand "nth" -1)
                            (("1" (propax) nil nil)) nil)
                           ("2" (typepred "j")
                            (("2" (hide-all-but (-1 1 3))
                              (("2" (grind) nil nil)) nil))
                            nil)
                           ("3" (typepred "i")
                            (("3" (hide-all-but (-1 1 3))
                              (("3" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide-all-but (-3 1 5))
                    (("3" (skeep)
                      (("3" (inst -1 "i" "j+1")
                        (("1" (expand "nth" -1 2)
                          (("1" (propax) nil nil)) nil)
                         ("2" (typepred "j")
                          (("2" (hide-all-but (-1 1 3))
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide-all-but (1 5)) (("4" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (both_sides_times_pos_lt2 formula-decl nil real_props nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (merge_permutes formula-decl nil radix_sort nil)
    (permutations_preserve_contents formula-decl nil sorting nil)
    (permutations_is_commutative formula-decl nil sorting nil)
    (nth_of_append formula-decl nil sorting nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (d_exp_dec formula-decl nil radix_sort nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (d_nth def-decl "below[10]" radix_sort nil)
    (length_append formula-decl nil list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth_append formula-decl nil sorting nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append_null formula-decl nil list_props nil)
    (append def-decl "list[T]" list_props nil)
    (expt def-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (merge def-decl "list[nat]" radix_sort nil)
    (nth def-decl "T" list_props nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (is_sorted_ud? const-decl "bool" radix_sort nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (merge_sort_d_sorts 0
  (merge_sort_d_sorts-1 nil 3747760065
   ("" (measure-induct+ "length(l)" ("l")) (("" (postpone) nil nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (merge_preserves_sort formula-decl nil radix_sort nil)
    (permutations_preserve_contents formula-decl nil sorting nil)
    (contents_prefix formula-decl nil sorting nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length_prefix formula-decl nil sorting nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_suffix formula-decl nil sorting nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (contents_suffix formula-decl nil sorting nil)
    (permutations_is_commutative formula-decl nil sorting nil)
    (merge_sort_permutes formula-decl nil radix_sort nil)
    (suffix def-decl "list[nat]" sorting nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (prefix def-decl "list[nat]" sorting nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (nth def-decl "T" list_props nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (merge_sort def-decl "list[nat]" radix_sort nil)
    (is_sorted_ud? const-decl "bool" radix_sort nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (radix_sort_d_sort 0
  (radix_sort_d_sort-1 nil 3747848399
   ("" (measure-induct+ "k-d" ("k" "d")) (("" (postpone) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (merge_sort def-decl "list[nat]" radix_sort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (merge_sort_d_sorts formula-decl nil radix_sort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (radixsort def-decl "list[nat]" radix_sort nil)
    (is_sorted_ud? const-decl "bool" radix_sort nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (radixsort_permutes 0
  (radixsort_permutes-1 nil 3748006034
   ("" (measure-induct+ "k-d" ("k" "d")) (("" (postpone) nil nil)) nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (permutations_is_transitive formula-decl nil sorting nil)
    (merge_sort def-decl "list[nat]" radix_sort nil)
    (merge_sort_permutes formula-decl nil radix_sort nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (radixsort def-decl "list[nat]" radix_sort nil)
    (permutations const-decl "bool" sorting nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (rem_max_digits 0
  (rem_max_digits-1 nil 3748007636
   ("" (skeep) (("" (postpone) nil nil)) nil)
   ((nth def-decl "T" list_props nil)
    (n_digits def-decl "posnat" radix_sort nil)
    (max_digits def-decl "posnat" radix_sort nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (d_digits_gt formula-decl nil radix_sort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (^ const-decl "real" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rem_mod2 formula-decl nil modulo_arithmetic nil)
    (expt def-decl "real" exponentiation nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (both_sides_expt_gt1_le_aux formula-decl nil exponentiation nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   shostak))
 (radixsort_permutes2 0
  (radixsort_permutes2-1 nil 3747666658
   ("" (skeep) (("" (postpone) nil nil)) nil)
   ((radixsort const-decl "list[nat]" radix_sort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (permutations const-decl "bool" sorting nil)
    (<= const-decl "bool" reals nil)
    (max_digits def-decl "posnat" radix_sort nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (radixsort_permutes formula-decl nil radix_sort nil))
   shostak))
 (Radixsort_sorts 0
  (Radixsort_sorts-1 nil 3748006538
   ("" (skeep) (("" (postpone) nil nil)) nil)
   ((radixsort const-decl "list[nat]" radix_sort nil)
    (radix_sort_d_sort formula-decl nil radix_sort nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (is_sorted_ud? const-decl "bool" radix_sort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (radixsort def-decl "list[nat]" radix_sort nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (radixsort_permutes formula-decl nil radix_sort nil)
    (permutations_preserve_contents formula-decl nil sorting nil)
    (permutations_is_commutative formula-decl nil sorting nil)
    (rem_max_digits formula-decl nil radix_sort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (both_sides_expt_gt1_gt_aux formula-decl nil exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rem_mod2 formula-decl nil modulo_arithmetic nil)
    (expt def-decl "real" exponentiation nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (<= const-decl "bool" reals nil)
    (max_digits def-decl "posnat" radix_sort nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (is_sorted? const-decl "bool" sorting nil)
    (nth def-decl "T" list_props nil))
   shostak)))

